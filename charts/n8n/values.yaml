# Default helm values for n8n.
# Default values within the n8n application can be found under https://github.com/n8n-io/n8n/blob/master/packages/cli/config/index.ts
n8n:
  encryption_key: hash-code  # n8n creates a random encryption key automatically on the first launch and saves it in the ~/.n8n folder. That key is used to encrypt the credentials before they get saved to the database.

generic:
  timezone: America/New_York  # The timezone to use. Is important for nodes like "Cron" which start the workflow automatically at a specified time. This setting can also be overwritten on a per workflow basis in the workflow settings in the editor.

smtp:
  host:  # SMTP server host
  port: 465 # SMTP server port  
  ssl: true # Whether or not to use SSL for SMTP
  user: # SMTP login username
  pass: "" # SMTP login password
  sender:  # How to display sender name'

executions:
  timeout: -1  # Max run time (seconds) before stopping the workflow execution
  timeoutMax: 3600  # Max execution time (seconds) that can be set for a workflow individually
  saveDataOnError: all  # What workflow execution data to save on error
  saveDataOnSuccess: none  # What workflow execution data to save on success
  saveExecutionProgress: false  # Whether or not to save progress for each node executed
  saveDataManualExecutions: false  # Save data of executions when started manually via editor
  pruneData: false  # Delete data of past executions on a rolling basis
  pruneDataMaxAge: 336  # How old (hours) the execution data has to be to get deleted
  pruneDataTimeout: 3600  # Timeout (seconds) after execution data has been pruned
  pruneDataMaxCount: 0  # Maximum number of executions to keep in DB. Default 0 = no limit

config: {}
    
secret: {} # Dict with all n8n json config options, unlike config the values here will end up in a secret.

# Typical Example of a config in combination with a secret.
# config:
#    database:
#      type: postgresdb
#      postgresdb:
#        host: 192.168.0.52
# secret:
#    database:
#      postgresdb:
#        password: 'big secret'

## ALL possible n8n Values

#
#database:
#  type:             # Type of database to use - Other possible types ['sqlite', 'mariadb', 'mysqldb', 'postgresdb'] - default: sqlite
#  tablePrefix:      # Prefix for table names - default: ''
#  postgresdb:
#    database:       # PostgresDB Database - default: n8n
#    host:           # PostgresDB Host - default: localhost
#    password:        # PostgresDB Password - default: ''
#    port:            # PostgresDB Port - default: 5432
#    user:            # PostgresDB User - default: root
#    schema:            # PostgresDB Schema - default: public
#    ssl:
#      ca:            # SSL certificate authority - default: ''
#      cert:            # SSL certificate - default: ''
#      key:            # SSL key - default: ''
#      rejectUnauthorized:    # If unauthorized SSL connections should be rejected - default: true
#  mysqldb:
#    database:        # MySQL Database - default: n8n
#    host:            # MySQL Host - default: localhost
#    password:        # MySQL Password - default: ''
#    port:            # MySQL Port - default: 3306
#    user:            # MySQL User - default: root
#credentials:
#  overwrite:
#    data:        # Overwrites for credentials - default: "{}"
#    endpoint:    # Fetch credentials from API - default: ''
#
#executions:
#  process:                # In what process workflows should be executed - possible values [main, own] - default: own
#  timeout:                # Max run time (seconds) before stopping the workflow execution - default: -1
#  maxTimeout:            # Max execution time (seconds) that can be set for a workflow individually - default: 3600
#  saveDataOnError:        # What workflow execution data to save on error - possible values [all , none] - default: all
#  saveDataOnSuccess:    # What workflow execution data to save on success - possible values [all , none] - default: all
#  saveDataManualExecutions:    # Save data of executions when started manually via editor - default: false
#  pruneData:            # Delete data of past executions on a rolling basis - default: false
#  pruneDataMaxAge:        # How old (hours) the execution data has to be to get deleted - default: 336
#  pruneDataTimeout:        # Timeout (seconds) after execution data has been pruned - default: 3600
#generic:
#  timezone:     # The timezone to use - default: America/New_York
#path:         # Path n8n is deployed to - default: "/"
#host:         # Host name n8n can be reached - default: localhost
#port:         # HTTP port n8n can be reached - default: 5678
#listen_address: # IP address n8n should listen on - default: 0.0.0.0
#protocol:       # HTTP Protocol via which n8n can be reached - possible values [http , https] - default: http
#ssl_key:        # SSL Key for HTTPS Protocol - default: ''
#ssl_cert:       # SSL Cert for HTTPS Protocol - default: ''
#security:
#  excludeEndpoints: # Additional endpoints to exclude auth checks. Multiple endpoints can be separated by colon - default: ''
#  basicAuth:
#    active:     # If basic auth should be activated for editor and REST-API - default: false
#    user:       # The name of the basic auth user - default: ''
#    password:   # The password of the basic auth user - default: ''
#    hash:       # If password for basic auth is hashed - default: false
#  jwtAuth:
#    active:               # If JWT auth should be activated for editor and REST-API - default: false
#    jwtHeader:            # The request header containing a signed JWT - default: ''
#    jwtHeaderValuePrefix: # The request header value prefix to strip (optional) default: ''
#    jwksUri:              # The URI to fetch JWK Set for JWT authentication - default: ''
#    jwtIssuer:            # JWT issuer to expect (optional) - default: ''
#    jwtNamespace:         # JWT namespace to expect (optional) -  default: ''
#    jwtAllowedTenantKey:  # JWT tenant key name to inspect within JWT namespace (optional) - default: ''
#    jwtAllowedTenant:     # JWT tenant to allow (optional) - default: ''
#endpoints:
#  rest:       # Path for rest endpoint  default: rest
#  webhook:    # Path for webhook endpoint  default: webhook
#  webhookTest: # Path for test-webhook endpoint  default: webhook-test
#externalHookFiles: # Files containing external hooks. Multiple files can be separated by colon - default: ''
#nodes:
#  exclude: # Nodes not to load - default: "[]"
#  errorTriggerType: # Node Type to use as Error Trigger - default: n8n-nodes-base.errorTrigger

# Set additional environment variables on the Deployment
extraEnv: {}
# Set this if running behind a reverse proxy and the external port is different from the port n8n runs on
#   WEBHOOK_TUNNEL_URL: "https://n8n.myhost.com/

replicaCount: 1

deploymentStrategy:
  type: "RollingUpdate"

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.218.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# here you can specify lifecycle hooks - it can be used e.g to easily add packages to the container without building
# your own docker image
# see https://github.com/8gears/n8n-helm-chart/pull/30
lifecycle:
  {}

#  here's the sample configuration to add mysql-client to the container
#lifecycle:
#  postStart:
#    exec:
#      command: ["/bin/sh", "-c", "apk add mysql-client"]

service:
  type: ClusterIP
  port: 80
  annotations: {}
    
ingress:
  enabled: true
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hostname: yourdomain.here
  tls:
    enabled: false
    issuer: "letsencrypt-prod" # cert-manager cluster-issuer name
  
  # define a custom incressClassName, like "traefik" or "nginx"
  className: "nginx"

workerResources:
  requests:
    cpu: 100m
    memory: 128Mi

webhookResources:
  requests:
    cpu: 100m
    memory: 128Mi

resources:
  requests:
    cpu: 100m
    memory: 200Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
#   cpu: 100m
#   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

scaling:
  enabled: false
  healthcheck: true  

  worker:
    count: 1
    concurrency: 10

  webhook:
    enabled: false
    count: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

## Bitnami Redis configuration
## https://github.com/bitnami/charts/tree/master/bitnami/redis
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: true
    password: ""
    existingSecret:
  master:
    persistence:
      enabled: true
      existingClaim:
      size: 3Gi  

externalRedis:
  host:
  port: 6379
  password: ""
  existingSecret:

## Bitnami MariaDB configuration
## https://github.com/bitnami/charts/tree/master/bitnami/mariadb
##
mariadb:
  ## @param mariadb.enabled Deploy a MariaDB server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the `externalDatabase.*` parameters
  ##
  enabled: true
  ## @param mariadb.architecture MariaDB architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone
  ## MariaDB Authentication parameters
  ## @param mariadb.auth.rootPassword MariaDB root password
  ## @param mariadb.auth.database MariaDB custom database
  ## @param mariadb.auth.username MariaDB custom user name
  ## @param mariadb.auth.password MariaDB custom user password
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-the-root-password-on-first-run
  ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-on-first-run
  ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
  ##
  auth:
    rootPassword: ""
    database: n8n
    username: n8n
    password: ""
    existingSecret:
  ## MariaDB Primary configuration
  ##
  primary:
    ## MariaDB Primary Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param mariadb.primary.persistence.enabled Enable persistence on MariaDB using PVC(s)
    ## @param mariadb.primary.persistence.storageClass Persistent Volume storage class
    ## @param mariadb.primary.persistence.accessModes [array] Persistent Volume access modes
    ## @param mariadb.primary.persistence.size Persistent Volume size
    ##
    persistence:
      enabled: true
      storageClass:
      existingClaim:
      accessModes:
        - ReadWriteOnce
      size: 10Gi

## External Database Configuration
## All of these values are only used if `mariadb.enabled=false`
##
externalDatabase:
  ## @param externalDatabase.host External Database server host
  ##
  host:
  ## @param externalDatabase.port External Database server port
  ##
  port: 3306
  ## @param externalDatabase.user External Database username
  ##
  user:
  ## @param externalDatabase.password External Database user password
  ##
  password: ""
  ## @param externalDatabase.database External Database database name
  ##
  database:
  ## @param externalDatabase.existingSecret The name of an existing secret with database credentials. Evaluated as a template
  ## NOTE: Must contain key `mariadb-password`
  ## NOTE: When it's set, the `externalDatabase.password` parameter is ignored
  ##
  existingSecret:
