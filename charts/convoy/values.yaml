# Default values for convoy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

convoy:
  env: production  # This parameter specifies the environment the Convoy instance will be running on. It is default to development and can be switched to production.

# This specifies the authentication mechanism used to access Convoy's API. Convoy has two APIs; one for the UI and the other for the public API. Each API requires authentication by default. Convoy supports two authentication mechanisms: | - native: Configure realm. This is used for the Public API. | - jwt: Configure jwt. This is used for UI authentication.
auth:
  native: true
  jwt: true
  signup: false

# Convoy sends out emails for several reasons for dead endpoints, team invitation etc. It needs a SMTP provider to do this.
smtp:
  provider: sendgrid # e.g. sendgrid or google
  url:
  port: 587
  username: ""
  password: ""
  from:
  replyTo:

extraEnv: {}

image:
  repository: docker.cloudsmith.io/convoy/convoy/frain-dev/convoy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hostname: yourdomain.here
  tls:
    enabled: true
    issuer: "letsencrypt-prod" # cert-manager cluster-issuer name

resources:
  server:
    replicaCount: 1
    requests:
      cpu: 100m
      memory: 32Mi
    limits: {}
  worker:
    replicaCount: 1
    requests:
      cpu: 100m
      memory: 32Mi
    limits: {}
  scheduler:
    requests:
      cpu: 100m
      memory: 32Mi
    limits: {}
  ingest:
    replicaCount: 1
    requests:
      cpu: 100m
      memory: 32Mi
    limits: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
##
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false
    username: convoy
    password: ""
    database: convoy
    existingSecret: ""
  architecture: standalone
  primary:
    persistence:
      enabled: true
      existingClaim:
      size: 10Gi  

## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for Airflow
## @param externalDatabase.password Password for the non-root username for Airflow
## @param externalDatabase.database Airflow database name
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
##
externalDatabase:
  host:
  port: 5432
  user:
  database:
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""

## Redis&reg; chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
## @param redis.enabled Switch to enable or disable the Redis&reg; helm
## @param redis.auth.enabled Enable password authentication
## @param redis.auth.password Redis&reg; password
## @param redis.auth.existingSecret The name of an existing secret with Redis&reg; credentials
## @param redis.architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
##
redis:
  enabled: true
  auth:
    enabled: true
    ## Redis&reg; password (both master and slave). Defaults to a random 10-character alphanumeric string if not set and auth.enabled is true.
    ## It should always be set using the password value or in the existingSecret to avoid issues
    ## with Airflow.
    ## The password value is ignored if existingSecret is set
    password: ""
    existingSecret: ""
  architecture: standalone
  master:
    persistence:
      enabled: true
      existingClaim:
      size: 3Gi  

## External Redis&reg; configuration
## All of these values are only used when redis.enabled is set to false
## @param externalRedis.host Redis&reg; host
## @param externalRedis.port Redis&reg; port number
## @param externalRedis.password Redis&reg; password
## @param externalRedis.existingSecret Name of an existing secret resource containing the Redis&trade credentials
## @param externalRedis.existingSecretPasswordKey Name of an existing secret key containing the Redis&trade credentials
##
externalRedis:
  host:
  port: 6379
  ## Most Redis&reg; implementations do not require a username
  ## to authenticate and it should be enough with the password
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
